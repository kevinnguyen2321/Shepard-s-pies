// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShepardPies.Data;

#nullable disable

namespace ShepardPies.Migrations
{
    [DbContext(typeof(ShepardPiesDbContext))]
    partial class ShepardPiesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "c4bbeb97-d3ba-4b53-b521-5ffa61e59b36",
                            Name = "Employee",
                            NormalizedName = "employee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52ce54fd-999c-4b62-88f4-959d3bdd0c0a",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDPdEvx+ErK+lR7rdzOvnit7SfuV2CNwVOvQg9mX2/cSjGMiF2Bqks3WCtqOgXoQdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c16c827-9220-433b-8333-5c13421bc4f0",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "d6bc2e97-e1fc-4a2f-b112-6ff861e69c37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5494bd2a-fed7-497f-82e0-7490dcf33f44",
                            Email = "employee1@company.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEF9YUoqD/ZFgxL+tf/9ZiGpqDhXREdzkRCuDlZt0WVknxVrd4JM3ijDXGHoXIaKGTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "54c8c656-0b39-4f25-92a3-a240ac77138e",
                            TwoFactorEnabled = false,
                            UserName = "employee1"
                        },
                        new
                        {
                            Id = "a1bc2e97-e2fc-4a3f-b123-7ff861e69d38",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "28ef67a5-9633-4f2a-8f38-92b50c69ed40",
                            Email = "employee2@company.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEL22zhpzcr0qR+dT9DHa3NyVnRlKrqYO++TMi0iKxc+S6Bh94tQsaoHCVaEuLqx5iQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "130ccdf1-585e-4cc6-bd5b-0a192cbc370a",
                            TwoFactorEnabled = false,
                            UserName = "employee2"
                        },
                        new
                        {
                            Id = "b2cd3e97-f3dc-4b4f-b234-8ff861e69e39",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7333c77-2a41-4e65-aa44-53dbb709492b",
                            Email = "employee3@company.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBn/81B5D0DPD0ei9QwUMeVEjxkgFaxl4rP8bCSq1/D3M9xHLjdkBX3iWIO7Kbhb/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6fcfd894-6901-4c63-bbb1-fa9d0e7ee978",
                            TwoFactorEnabled = false,
                            UserName = "employee3"
                        },
                        new
                        {
                            Id = "c3de4e97-g4ec-4c5f-b345-9ff861e69f40",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97de7068-5373-4535-95da-456409461e06",
                            Email = "employee4@company.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKsFNV4XSIbmg+PFJ/HvANbHx13q8OkVOE61HNpwtiSPoO8EiqVAEbUaR5NWGiJCJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44157366-4bf6-4f79-be82-f299199b5284",
                            TwoFactorEnabled = false,
                            UserName = "employee4"
                        },
                        new
                        {
                            Id = "d4ef5e97-h5fc-4d6f-b456-aff861e69g41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a13a990a-3ed9-49e0-b070-80503dab9807",
                            Email = "employee5@company.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEImIN9Si8a3mcgsqGjRHO8O8CWdc9mTSl6/S1kCzn9Dvr2wT1qJENfDT5z5t8VojWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c8b0303-a817-41e1-8fb0-7a550617839d",
                            TwoFactorEnabled = false,
                            UserName = "employee5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "d6bc2e97-e1fc-4a2f-b112-6ff861e69c37",
                            RoleId = "c4bbeb97-d3ba-4b53-b521-5ffa61e59b36"
                        },
                        new
                        {
                            UserId = "a1bc2e97-e2fc-4a3f-b123-7ff861e69d38",
                            RoleId = "c4bbeb97-d3ba-4b53-b521-5ffa61e59b36"
                        },
                        new
                        {
                            UserId = "b2cd3e97-f3dc-4b4f-b234-8ff861e69e39",
                            RoleId = "c4bbeb97-d3ba-4b53-b521-5ffa61e59b36"
                        },
                        new
                        {
                            UserId = "c3de4e97-g4ec-4c5f-b345-9ff861e69f40",
                            RoleId = "c4bbeb97-d3ba-4b53-b521-5ffa61e59b36"
                        },
                        new
                        {
                            UserId = "d4ef5e97-h5fc-4d6f-b456-aff861e69g41",
                            RoleId = "c4bbeb97-d3ba-4b53-b521-5ffa61e59b36"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShepardPies.Models.Cheese", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cheeses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Buffalo Mozzarella"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Four Cheese"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Vegan"
                        },
                        new
                        {
                            Id = 4,
                            Name = "None"
                        });
                });

            modelBuilder.Entity("ShepardPies.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DriverId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OrderPlacedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Tip")
                        .HasColumnType("numeric");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderPlacedOn = new DateTime(2024, 12, 15, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Tip = 5.00m,
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 2,
                            DriverId = 4,
                            OrderPlacedOn = new DateTime(2024, 12, 16, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 3,
                            DriverId = 5,
                            OrderPlacedOn = new DateTime(2024, 12, 17, 18, 45, 0, 0, DateTimeKind.Unspecified),
                            Tip = 7.00m,
                            UserProfileId = 3
                        });
                });

            modelBuilder.Entity("ShepardPies.Models.Pizza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CheeseId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("SauceId")
                        .HasColumnType("integer");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CheeseId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SauceId");

                    b.ToTable("Pizzas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheeseId = 1,
                            OrderId = 1,
                            Price = 10.00m,
                            SauceId = 1,
                            Size = "Small"
                        },
                        new
                        {
                            Id = 2,
                            CheeseId = 2,
                            OrderId = 1,
                            Price = 12.00m,
                            SauceId = 2,
                            Size = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            CheeseId = 3,
                            OrderId = 2,
                            Price = 15.00m,
                            SauceId = 3,
                            Size = "Large"
                        });
                });

            modelBuilder.Entity("ShepardPies.Models.Sauce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sauces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Marinara"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Arrabbiata"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Garlic White"
                        },
                        new
                        {
                            Id = 4,
                            Name = "None"
                        });
                });

            modelBuilder.Entity("ShepardPies.Models.Topping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PizzaId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PizzaId");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sausage",
                            PizzaId = 1,
                            Price = 0.50m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pepperoni",
                            PizzaId = 1,
                            Price = 0.50m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mushroom",
                            PizzaId = 1,
                            Price = 0.50m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Onion",
                            PizzaId = 2,
                            Price = 0.50m
                        },
                        new
                        {
                            Id = 5,
                            Name = "Green Pepper",
                            PizzaId = 2,
                            Price = 0.50m
                        },
                        new
                        {
                            Id = 6,
                            Name = "Black Olive",
                            PizzaId = 2,
                            Price = 0.50m
                        },
                        new
                        {
                            Id = 7,
                            Name = "Basil",
                            PizzaId = 3,
                            Price = 0.50m
                        },
                        new
                        {
                            Id = 8,
                            Name = "Extra Cheese",
                            PizzaId = 3,
                            Price = 0.50m
                        });
                });

            modelBuilder.Entity("ShepardPies.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            Address = " 220 High Street",
                            FirstName = "Tom",
                            IdentityUserId = "d6bc2e97-e1fc-4a2f-b112-6ff861e69c37",
                            LastName = "Jones"
                        },
                        new
                        {
                            Id = 3,
                            Address = "123 Oak Street",
                            FirstName = "Emily",
                            IdentityUserId = "a1bc2e97-e2fc-4a3f-b123-7ff861e69d38",
                            LastName = "Davis"
                        },
                        new
                        {
                            Id = 4,
                            Address = "456 Maple Avenue",
                            FirstName = "Michael",
                            IdentityUserId = "b2cd3e97-f3dc-4b4f-b234-8ff861e69e39",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 5,
                            Address = "789 Pine Lane",
                            FirstName = "Sarah",
                            IdentityUserId = "c3de4e97-g4ec-4c5f-b345-9ff861e69f40",
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = 6,
                            Address = "321 Elm Road",
                            FirstName = "Robert",
                            IdentityUserId = "d4ef5e97-h5fc-4d6f-b456-aff861e69g41",
                            LastName = "Brown"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShepardPies.Models.Order", b =>
                {
                    b.HasOne("ShepardPies.Models.UserProfile", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("ShepardPies.Models.UserProfile", "OrderTaker")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("OrderTaker");
                });

            modelBuilder.Entity("ShepardPies.Models.Pizza", b =>
                {
                    b.HasOne("ShepardPies.Models.Cheese", "Cheese")
                        .WithMany()
                        .HasForeignKey("CheeseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShepardPies.Models.Order", "Order")
                        .WithMany("Pizzas")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShepardPies.Models.Sauce", "Sauce")
                        .WithMany()
                        .HasForeignKey("SauceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cheese");

                    b.Navigation("Order");

                    b.Navigation("Sauce");
                });

            modelBuilder.Entity("ShepardPies.Models.Topping", b =>
                {
                    b.HasOne("ShepardPies.Models.Pizza", null)
                        .WithMany("Toppings")
                        .HasForeignKey("PizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShepardPies.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("ShepardPies.Models.Order", b =>
                {
                    b.Navigation("Pizzas");
                });

            modelBuilder.Entity("ShepardPies.Models.Pizza", b =>
                {
                    b.Navigation("Toppings");
                });
#pragma warning restore 612, 618
        }
    }
}
